package rancher2

import (
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	norman "github.com/rancher/norman/types"
	"github.com/rancher/rancher/pkg/apis/catalog.cattle.io/v1"
)

const (
	catalogV2Kind             = "ClusterRepo"
	catalogV2APIGroup         = "catalog.cattle.io"
	catalogV2APIVersion       = "v1"
	catalogV2APIType          = rancher2CatalogTypePrefix + ".clusterrepo"
	catalogV2ClusterIDsep     = "."
	catalogV2DefaultGitBranch = "master"
)

//Types

type ClusterRepo struct {
	norman.Resource
	v1.ClusterRepo
}

type ClusterRepoCollection struct {
	norman.Collection
	Data []ClusterRepo `json:"data,omitempty"`
}

// Schemas

func catalogV2Fields() map[string]*schema.Schema {
	s := map[string]*schema.Schema{
		"cluster_id": {
			Type:        schema.TypeString,
			Required:    true,
			ForceNew:    true,
			Description: "K8s cluster ID",
		},
		"name": {
			Type:        schema.TypeString,
			Required:    true,
			Description: "K8s Repo name",
		},
		"ca_bundle": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "PEM encoded CA bundle which will be used to validate the repo's certificate",
		},
		"enabled": {
			Type:        schema.TypeBool,
			Optional:    true,
			Default:     true,
			Description: "If disabled the repo clone will not be updated or allowed to be installed from",
		},
		"git_branch": {
			Type:        schema.TypeString,
			Optional:    true,
			Computed:    true,
			Description: "Git Repository branch containing Helm chart definitions",
		},
		"git_repo": {
			Type:          schema.TypeString,
			Optional:      true,
			Description:   "Git Repository containing Helm chart definitions",
			ConflictsWith: []string{"url"},
		},
		"insecure": {
			Type:        schema.TypeBool,
			Optional:    true,
			Default:     false,
			Description: "Use insecure HTTPS to download the repo's index",
		},
		"resource_version": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"secret_name": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "K8s secret name to be used to connect to the repo",
		},
		"secret_namespace": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "K8s secret namespace",
		},
		"service_account": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "K8s service account used to deploy charts instead of the end users credentials",
		},
		"service_account_namespace": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "K8s namsepace of the service account",
		},
		"url": {
			Type:          schema.TypeString,
			Optional:      true,
			Description:   "URL to an index generated by Helm",
			ConflictsWith: []string{"git_repo"},
		},
	}

	for k, v := range commonAnnotationLabelFields() {
		s[k] = v
	}

	return s
}
